/*
The goal of this exercise is to familiarize you with adversaries in Tamarin. It is recommended that you regularly try to reload the model to check syntax.
*/

theory ExerciseSymmetricEncryption
begin

builtins: symmetric-encryption

/*
Importing symmetric encryption message theory defines the functions senc/2 and sdec/2 with the equation sdec(senc(m, k), k) = m

[ Fr(~k) ] generates a unguessable/fresh value k (in premise)
[ !LongTermKey($A, ~k) ] is a function application with general form f(t1, t2) where $A is a public value and ~k is the unguessable value.
*/

rule KeyGen:
  [ Fr(~k) ]
  -->
  [ !LongTermKey($A, ~k) ]

/*
In the rule SendMsg, we want to output a message from A.

To do this the premise should include the long term key that we previously generated using KeyGen [ !LongTermKey($A, ~k) ].

The action fact should be --[ MessageWasSentBy($A, ~msg) ]->

And the conclusion should be [ Out(~k) ]
*/

rule SendMsg:
  []
  --[ // MessageWasSentBy($A, ~msg)
    ]->
  []

lemma Secrecy:
  "All p m #t. MessageWasSentBy(p, m) @ #t ==> not Ex #x. K(m) @ #x"

end