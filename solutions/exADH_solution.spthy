theory ExerciseADH
begin

builtins: symmetric-encryption, diffie-hellman


rule Ltk:
  let publicComponenet = g^sk in
  [ Fr(~sk) ]
  -->
  [ !Ltk($P, ~sk), !Pk($P, publicComponent) , Out(publicComponent) ]


rule A_Init:
  [ !Pk($A, pkA) ]
  --[ ReachAInit() ]->
  [ Out(<'req', $A, $B, pkA>), St_A($A, $B) ]


rule B_Init:
  let sharedKey = pkA^sk
  [ !Ltk($B, ~sk), !Pk($A, pkA), ~Pk($B, pkB), In(<'req', $A, $B, pkA) ]
  --[ ResponderKey(sharedKey) ]->
  [ Out(<senc('ack', sharedKey), $A, $B, pkB) ]

rule A_SendMsg:
  let sharedKey = pkB^~sk in
  [ !Ltk($A, ~sk), !Pk($B, pkB), Fr(~msg), In(<encryptedAck, $A, $b, pkB>), St_A($A, $B) ]
  --[ MessageWasSent(~msg), 
      InitiatorKey(sharedKey), 
      Eq('ack', sdec(encryptedAck, sharedKey)) ]->
  [ Out(senc(~msg, sharedKey)) ]
