theory ExerciseADH
begin

builtins: symmetric-encryption, diffie-hellman


// This rule models a participant generating a fresh public-private key pair
rule Ltk:
    let publicKey = 'g'^secretKey in // Calculate the public key
    [ Fr(secretKey) ] // Generate the private key
    -->
    [ !Ltk($P, secretKey) // Store the private key  
    , !Pk($P, publicKey) // Store the public key
    , Out(publicKey) // Output the public key
    ]

// This rule models A's initial message
rule A_Init:
    [ !Pk($A, publicKeyA) ] // Look up A's public key
  --[ ReachAInit() ]->
    [ Out(<'req', $A, $B, publicKeyA>) // Output A's initial message
    , St_A($A, $B) // Store A and B for reference
    ]

// This rule models B's response
rule B_Init:
    let sharedKey = publicKeyA^~secretKeyB in // Calculate the shared key using A's public key
    [ !Ltk($B, ~secretKeyB) // Look up B's secret key
    , !Pk($A, publicKeyA) // Look up A's public key
    , !Pk($B, publicKeyB) // Look up B's public key
    , In(<'req', $A, $B, publicKeyA>) // Take A's initial message as input
    ]
    --[ ReachBInit()
    , ResponderKey(sharedKey) 
    ]->
    [ Out(<senc('ack', sharedKey), $A, $B, publicKeyB>) ] // Output B's acknowledgement message

// This rule models A sending a message using the shared key
rule A_SendMsg:
    let sharedKey = publicKeyB^~secretKeyA in // Calculate the shared key
    [ !Ltk($A, ~secretKeyA) // Look up A's secret key
    , !Pk($B, publicKeyB) // Look up B's public key
    , Fr(~msg) // Generate a fresh message
    , In(<encryptedAck, $A, $B, publicKeyB>) // Take B's acknowledgement message as input
    , St_A($A, $B) // Look up A and B 
    ]
  --[ ReachASendMsg()
    , MessageWasSent(~msg)
    , InitiatorKey(sharedKey)
    , Eq('ack', sdec(encryptedAck, sharedKey)) 
    ]->
    [ Out(senc(~msg, sharedKey)) ]  // Output a symmetrically-encrypted message using the shared key


/*
This restriction allows you to use the Eq action fact in rules to constrain that two terms must be 
equal. This is used to "compare" two messages or terms, e.g., to check that signature verification 
is equal to true.
*/

restriction Eq:
  "All t1 t2 #x. Eq(t1, t2) @ #x ==> t1 = t2"


// Finally, the lemmas define the security parameters we want to test

lemma Executability:
  exists-trace
  "Ex #t1 #t2 #t3. ReachAInit() @ #t1 & ReachBInit() @ #t2 & ReachASendMsg() @ #t3"

lemma ResponderKeySecrecy:
  "All k #t. ResponderKey(k) @ #t ==> not Ex #x. K(k) @ #x"

lemma InitiatorKeySecrecy:
  "All k #t. InitiatorKey(k) @ #t ==> not Ex #x. K(k) @ #x"

lemma SendMsgSecrecy:
  "All m #t. MessageWasSent(m) @ #t ==> not Ex #x. K(m) @ #x"

end