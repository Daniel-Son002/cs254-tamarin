/*

The goal of this exercise is to formalize the insecure version of the Needham-Schroeder protocol and prove that it is insecure.
	1. A -> B: {(A, N_A)}pk(B)
	2. B -> A: {(N_A, N_B)}pk(A)
	3. A -> B: {N_B}pk(B)
Here, pk(A) and pk(B) are public keys with corresponding secret keys, (., .) represents concatenation, and N_A and N_B are random nonces.

*/

theory NSInsecure
begin

/*

This builtin gives us access to 3 function symbols -- aenc, adec, and pk -- satisfying the following equality:
	adec(aenc(m, pk(sk)), sk) = m
Note the distinction between the public key and the secret key, unlike symmetric encryption.

*/
builtins: asymmetric-encryption


// The following rules define the public key infrastructure

// Rule to register new key
rule RegLtk:
	[ Fr(~ltkA) ] // Generate fresh key
	-->
	[ !Ltk($A, ~ltkA), !Pk($A, pk(~ltkA)), Out(pk(~ltkA)) ] // Save secret and public key, announce public key

// This allows an adversary to retrieve a public key
rule GetPk:
	[ !Pk($A, pkA) ]
	-->
	[ Out(pkA) ]

// This allows us to model a secret key being revealed, but ensured that this is logged by an action
rule RevLtk:
	[ !Ltk($A, ltkA) ] // Look up secret key
	--[ LtkReveal($A) ]->
	[ Out(ltkA) ] // Announce secret key


// We now define our protocol

// Send first message
rule A1:
	let m1 = aenc {$A, ~nA} pkB // Encode (A, N_A) with B's public key
	in
	[ Fr(~nA) // Generate fresh nonce
	, !Pk($B, pkB) // Look up public key
	] 
	-->
	[ A1($A, $B, ~nA) // Store sender, reciever and nonce
	, Out(m1) // Output message
	]

// Recieve first message, send second message
rule B1:
	let m1 = aenc {$A, nA} pk(ltkB) // Define message that B recieves
		m2 = aenc {nA, ~nB} pkA // Encode (N_A, N_B) with A's public key
	in
	[ !Ltk($B, ltkB) // Look up secret key
	, In(m1) // Read message
	, Fr(~nB) // Generate fresh nonce
	, !Pk($A, pkA) // Look up public key
	]
	-->
	[ B1($B, $A, nA, ~nB) // Store sender, reciever and both nonces
	, Out(m2) // Output message
	]

// Recieve second message, send third message
rule A2:
	let m2 = aenc {B, nB} pk(ltkA) // Define message that A recieves
		m3 = aenc {nB} pkB // Encode N_B with B's public key
	in
	[ A1(A, B, nA) // Look up sender, reciever and nonce
	, !Ltk(A, ltkA) // Look up secret key
	, In(m2) // Read message
	, !Pk(B, pkB) // Look up public key
	]
	-->
	[ Out(m3) // Output message
	, Nonce(A, B, nA) // Confirmation of N_A for A
	, Nonce(A, B, nB) // Confirmation of N_B for A
	]

// Recieve third message
rule B2:
	let m3 = aenc{nB} pk(ltkB) // Define message that B recieves
	in
	[ B1(B, A, nA, nB) // Look up sender, reciever and both nonces
	, !Ltk(B, ltkB) // Look up secret key
	, In(m3) // Read message
	]
	-->
	[ Nonce(B, A, nA) // Confirmation of N_A for B
	, Nonce(B, A, nB) // Confirmation of N_B for B
	]

end